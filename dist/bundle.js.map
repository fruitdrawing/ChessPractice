{"version":3,"file":"bundle.js","sources":["../src/cell.ts","../src/Command.ts","../src/Piece.ts","../src/Pawn.ts","../src/Rook.ts","../src/Knight.ts","../src/Bishop.ts","../src/King.ts","../src/GameManager.ts","../src/ChessApp.ts","../src/index.ts"],"sourcesContent":["import { GameManager } from \"./GameManager\"\n\nexport class Cell{\n    readonly x : number;\n    readonly y : number;\n    readonly id : string;\n    private IsOccupied :boolean = false;\n    // StandingPiece : Piece;\n    readonly HTMLElement : HTMLButtonElement;\n    onClickEvent : Event\n    gameManageRef : GameManager\n    constructor(x: number, y: number,button : HTMLButtonElement,gameManager : GameManager){\n        this.x = x;\n        this.y = y;\n        this.id = `${x},${y}`;\n        this.HTMLElement = button;   \n        this.HTMLElement.classList.add('cell');\n        this.gameManageRef = gameManager;\n        let clickFn = this.OnClick.bind(this);\n        this.HTMLElement.addEventListener('click', clickFn);\n    }\n   \n    OnClick(event : MouseEvent)\n    {\n        console.log(\"On Clicked\");\n        this.gameManageRef.ReceiveCellButtonEvent(this);\n    }\n    TurnOnMovementAvailableState()\n    {\n        if(this.HTMLElement.classList.contains('movementAvailableCell'))\n        {\n            return;\n        }\n        else\n        {\n            this.HTMLElement.classList.add('movementAvailableCell');\n        }\n    }\n\n    TurnOffMovementAvailableState()\n    {\n        if(this.HTMLElement.classList.contains('movementAvailableCell'))\n        {\n            this.HTMLElement.classList.remove('movementAvailableCell');\n        }\n        else\n        {\n            return;\n        }\n    }\n    \n    SetOccupied(bool : boolean)\n    {\n        this.IsOccupied = bool;\n    }\n    CheckOccupied() : boolean\n    {\n        return this.IsOccupied;\n    }\n\n    IsAvailableMovementCell() : boolean\n    {\n        return this.HTMLElement.classList.contains('movementAvailableCell');\n    }\n\n\n}\n\n","import { PieceType } from \"./ChessApp\";\nimport { Piece } from \"./Piece\";\n\nexport abstract class Command{\n    constructor(){\n\n    }\n    abstract Execute() : void;\n    abstract Undo() : void;\n}\n\n\nexport class MoveCommand extends Command{\n\n    toX : number;\n    toY : number;\n    fromX : number;\n    fromY : number;\n    pieceType : PieceType;\n    pieceRef : Piece;\n    constructor(piece : Piece,toX:number,toY:number){\n        super();\n        this.toX = toX;\n        this.toY = toY;\n        this.pieceType = piece.PieceType;\n        this.pieceRef = piece;\n        this.fromX = piece.x;\n        this.fromY = piece.y;\n\n    }\n    Execute(): void {\n        this.pieceRef.Move(this.toX,this.toY);\n    }\n    Undo(): void {\n    }\n}\n\n\n\nexport class MoveAttackCommand extends MoveCommand{\n    constructor(piece : Piece ,x:number,y:number)\n    {\n        super(piece,x,y);\n\n\n    }\n}\n","import { Cell } from './cell';\nimport { Team , PieceType} from './ChessApp';\nimport { MoveCommand } from './Command';\nimport { Position } from './vector2';\nexport abstract class Piece{\n    x:number;\n    y:number;\n    img:HTMLImageElement;\n    clickArea : HTMLElement;\n    team: Team;\n    currentStandingCell : Cell;\n    PieceType : PieceType;\n    Position  : Position;\n    readonly cellListRef : Cell[]\n    readonly pieceListRef : Piece[]\n    constructor(x:number,y:number,team:Team,cellList:Cell[],pieceList:Piece[]){\n        this.x = x;\n        this.y = y;\n        this.team = team;\n        this.cellListRef = cellList;\n        this.pieceListRef = pieceList;\n        this.SetupHTMLElement(x,y,team);\n        this.Move(x,y);\n    }\n\n    SetupHTMLElement(x:number,y:number,team:Team)\n    {\n        let found : Cell = this.cellListRef.find(e => e.id == `${x},${y}`)!;\n        this.img = document.createElement(\"img\");\n        this.img.classList.add(\"Piece\");\n        var cell = document.getElementById(`${x},${y}`)!;\n        cell.append(this.img);\n        this.img.classList.add(team.toString()+\"Team\");\n    }\n\n\n    Move(x:number,y:number) : MoveCommand | undefined\n    {\n\n        let oldStandingCell : Cell = this.cellListRef.find(e => e.id == `${this.x},${this.y}`)!;\n        let newStandingCell : Cell = this.cellListRef.find(e => e.id == `${x},${y}`)!;\n        if(!this.CanMoveToCellWithAttack(newStandingCell))\n        {\n            console.log(\"Movement Failed!\");\n            return undefined;\n        }\n        else\n        {\n            let newParent = document.getElementById(`${x},${y}`);\n            newParent?.appendChild(this.img);\n            this.x = x;\n            this.y = y;\n            oldStandingCell.SetOccupied(false);\n            // oldStandingCell.StandingPiece = undefined;\n            // newStandingCell.StandingPiece = this;\n            newStandingCell.SetOccupied(true);\n            this.currentStandingCell = newStandingCell;\n            console.log(\"Move Success\");\n            return new MoveCommand(this,this.x,this.y);\n        }\n    }\n    \n    abstract FindMovementAvailableCells(cell : Cell[]) : Cell[] | undefined;\n\n\n    Kill(piece:Piece) : void\n    {\n        piece.Die();\n    }\n    \n    Die() : void\n    {\n        // this.currentStandingCell.SetOccupied(false);\n        this.img.remove();\n        console.log(\"Dead ! !\");\n    }\n\n    FindNorthCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x) && (e.y == cell.y - 1));\n        return foundCell;\n    }\n\n    FindWestCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x-1) && (e.y == cell.y));\n        return foundCell;\n    }\n\n    FindEastCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x+1) && (e.y == cell.y));\n        return foundCell;\n    }\n\n    FindSouthCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x) && (e.y == cell.y+1));\n        return foundCell;\n    }\n\n    FindNorthWestCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x-1) && (e.y == cell.y-1));\n        return foundCell;\n    }\n    \n    FindNorthEastCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x+1) && (e.y == cell.y-1));\n        return foundCell;\n    }\n\n    FindSouthWestCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x-1) && (e.y == cell.y+1));\n        return foundCell;\n    } \n\n    FindSouthEastCell(cell : Cell) : Cell | undefined\n    {\n        let foundCell : Cell | undefined = this.cellListRef.find(e => (e.x == cell.x+1) && (e.y == cell.y+1));\n        return foundCell;\n    }\n\n    // InvertDirectionByTeam(team:Team,direction:Direction) : Direction\n    // {\n    //     if(team == Team.South)\n    //     {\n    //         switch(direction){\n    //             case Direction.South:\n    //                 break;\n    //             case Direction.North:\n    //                 break;\n    //             case Direction.East:\n    //                 return Direction.West;\n    //             case \n                \n    //             }\n    //     }\n    // }\n\n\n    CheckSomeoneIsThere(toCell:Cell |undefined) : boolean\n    {\n        if(!toCell) return false;\n        //\n        if(toCell.CheckOccupied() == true || toCell == undefined)\n        {\n            return false;\n        }\n        return true;\n    }\n    \n    CanMoveToCellWithAttack(cell : Cell | undefined) : boolean\n    {\n        if(!cell) return false;\n\n        if(cell.CheckOccupied())\n        {\n            let stnadingPiece : Piece = this.pieceListRef.find(p => p.x == cell.x && p.y == cell.y)!;\n            if(stnadingPiece.team == this.team)\n            {\n                return false;\n            }\n            else\n            {\n                return true;\n            }\n        }\n        else\n        {\n            return true;\n        }\n    }\n    HasOpponentInCell(cell:Cell | undefined) : boolean\n    {\n        if(!cell) return false;\n        if(cell.CheckOccupied())\n        {\n            let standingPiece : Piece = this.pieceListRef.find(p => p.x == cell.x && p.y == cell.y)!;\n            if(standingPiece.team != this.team)\n            return true;\n        }\n        return false;\n\n    }\n}\n","import { Cell } from \"./cell\";\nimport { Team ,PieceType} from \"./ChessApp\";\nimport { Piece } from \"./Piece\";\n\nexport class Pawn extends Piece{\n    constructor(x:number,y:number,team:Team,cellList:Cell[],pieceList:Piece[]){\n        super(x,y,team,cellList,pieceList);\n        this.img.classList.add(`${Pawn.name}`)\n        this.PieceType = PieceType.Pawn;\n    }\n\n    FindMovementAvailableCells(): Cell[] | undefined {\n        let tempCellList : Cell[] | undefined = [];\n\n        if(this.team == Team.North)\n        {\n            // todo : 확 줄여야함.\n            let forwardOne : Cell | undefined = this.FindSouthCell(this.currentStandingCell);\n            if(this.CheckSomeoneIsThere(forwardOne))\n            {\n                if(!this.HasOpponentInCell(forwardOne))\n                {\n                    if(forwardOne != undefined)\n                    {\n                        tempCellList.push(forwardOne);\n                        let forwardTwo : Cell | undefined  = this.FindSouthCell(forwardOne)!;\n                        if(this.CanMoveToCellWithAttack(forwardTwo))\n                        {\n                            if(!this.HasOpponentInCell(forwardTwo))\n                            {\n                                tempCellList.push(forwardTwo);\n                            }\n                        }\n                    }\n                }\n            }\n            let forwardRight : Cell | undefined = this.FindSouthWestCell(this.currentStandingCell);\n\n\n            if(this.HasOpponentInCell(forwardRight))\n            {\n                if(forwardRight != undefined)\n                {\n                    tempCellList.push(forwardRight);\n                }\n            }\n            let forwardLeft : Cell | undefined = this.FindSouthEastCell(this.currentStandingCell);\n\n            if(this.HasOpponentInCell(forwardLeft))\n            {\n                if(forwardLeft != undefined)\n                {\n                    tempCellList.push(forwardLeft);\n                }\n            }\n        }\n        else\n        {\n            let forwardOne : Cell | undefined = this.FindNorthCell(this.currentStandingCell)!;\n            if(this.CanMoveToCellWithAttack(forwardOne))\n            {\n                if(!this.HasOpponentInCell(forwardOne))\n                {\n                    tempCellList.push(forwardOne);\n                    let forwardTwo = this.FindNorthCell(forwardOne)!;\n                    if(this.CanMoveToCellWithAttack(forwardTwo))\n                    {\n                        if(!this.HasOpponentInCell(forwardTwo))\n                        {\n                            tempCellList.push(forwardTwo);\n                        }\n\n                    }\n                }\n            }\n            let forwardRight : Cell | undefined = this.FindNorthEastCell(this.currentStandingCell);\n\n            if(this.HasOpponentInCell(forwardRight))\n            {\n                if(forwardRight != undefined)\n                {\n                    tempCellList.push(forwardRight);\n                }\n            }\n            let forwardLeft : Cell | undefined = this.FindNorthWestCell(this.currentStandingCell);\n\n            if(this.HasOpponentInCell(forwardLeft))\n            {\n                if(forwardLeft != undefined)\n                {\n                    tempCellList.push(forwardLeft);\n                }\n            }\n\n        }\n        return tempCellList;\n\n        }\n       \n\n    }\n    \n\n","import { Cell } from \"./cell\";\nimport { Team ,PieceType} from \"./ChessApp\";\nimport { Piece } from \"./Piece\";\n\nexport class Rook extends Piece{\n    FindMovementAvailableCells(cellList : Cell[]) : Cell[] | undefined {\n        let teamCellList : Cell[] | undefined = [];\n        let northCell : Cell | undefined = this.FindNorthCell(this.currentStandingCell);\n        let westCell : Cell | undefined = this.FindWestCell(this.currentStandingCell);\n        let eastCell : Cell | undefined = this.FindEastCell(this.currentStandingCell);\n        let southCell : Cell | undefined = this.FindSouthCell(this.currentStandingCell);\n\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(northCell && this.CanMoveToCellWithAttack(northCell))\n            {\n                teamCellList.push(northCell);\n                northCell = this.FindNorthCell(northCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(westCell && this.CanMoveToCellWithAttack(westCell))\n            {\n                teamCellList.push(westCell);\n                westCell = this.FindWestCell(westCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(eastCell&& this.CanMoveToCellWithAttack(eastCell))\n            {\n                teamCellList.push(eastCell);\n                eastCell = this.FindEastCell(eastCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(southCell&& this.CanMoveToCellWithAttack(southCell))\n            {\n                teamCellList.push(southCell);\n                southCell = this.FindSouthCell(southCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        \n        return teamCellList;\n\n    }\n    constructor(x:number,y:number,team:Team,cellList:Cell[],pieceList:Piece[])\n    {\n        super(x,y,team,cellList,pieceList);\n        this.img.classList.add(`${Rook.name}`)\n        this.PieceType = PieceType.Rook;\n    }\n}\n","import { Cell } from \"./cell\";\nimport { Team ,PieceType} from \"./ChessApp\";\nimport { Piece } from \"./Piece\";\n\nexport class Knight extends Piece{\n    FindMovementAvailableCells(): Cell[] | undefined{\n        let teamCellList : Cell[] | undefined = [];\n        let northCell : Cell | undefined = this.FindNorthCell(this.currentStandingCell);\n        let westCell : Cell | undefined = this.FindWestCell(this.currentStandingCell);\n        let southCell : Cell | undefined = this.FindSouthCell(this.currentStandingCell);\n        let eastCell : Cell | undefined = this.FindEastCell(this.currentStandingCell);\n        if(northCell)\n        {\n            let northNorthWestCell : Cell | undefined = this.FindNorthWestCell(northCell);\n            let northNorthEastCell : Cell | undefined = this.FindNorthEastCell(northCell);\n            if(northNorthWestCell && this.CanMoveToCellWithAttack(northNorthWestCell))\n                    teamCellList.push(northNorthWestCell);\n            if(northNorthEastCell && this.CanMoveToCellWithAttack(northNorthEastCell))\n                    teamCellList.push(northNorthEastCell);\n        }\n        if(westCell)\n        {\n            let westNorthWestCell : Cell | undefined = this.FindNorthWestCell(westCell);\n            let westSouthWestCell : Cell | undefined = this.FindSouthWestCell(westCell);\n            if(westNorthWestCell)\n            {\n                if(this.CanMoveToCellWithAttack(westNorthWestCell))\n                {\n                    teamCellList.push(westNorthWestCell);\n                }\n            }\n            if(westSouthWestCell)\n            {\n                if(this.CanMoveToCellWithAttack(westSouthWestCell))\n                {\n                    teamCellList.push(westSouthWestCell);\n                }\n            }\n        }\n\n\n\n        if(southCell)\n        {\n            let southSouthWestCell : Cell | undefined = this.FindSouthWestCell(southCell);\n            let southSouthEastCell : Cell | undefined = this.FindSouthEastCell(southCell);\n            if(southSouthWestCell)\n            {\n                if(this.CanMoveToCellWithAttack(southSouthWestCell))\n                {\n                    teamCellList.push(southSouthWestCell);\n                }\n            }\n            if(southSouthEastCell)\n            {\n                if(this.CanMoveToCellWithAttack(southSouthEastCell))\n                {\n                    teamCellList.push(southSouthEastCell);\n                }\n            }\n        }\n\n        if(eastCell)\n        {\n            let eastNorthEastCell : Cell | undefined = this.FindNorthEastCell(eastCell);\n            let eastSouthEastCell : Cell | undefined = this.FindSouthEastCell(eastCell);\n            if(eastNorthEastCell)\n            {\n                if(this.CanMoveToCellWithAttack(eastNorthEastCell))\n                {\n                    teamCellList.push(eastNorthEastCell);\n                }\n            }\n            if(eastSouthEastCell)\n            {\n                if(this.CanMoveToCellWithAttack(eastSouthEastCell))\n                {\n                    teamCellList.push(eastSouthEastCell);\n                }\n            }\n        }\n\n        return teamCellList;\n\n    }\n    constructor(x:number,y:number,team:Team,cellList:Cell[],pieceList:Piece[])\n    {\n        super(x,y,team,cellList,pieceList);\n        this.img.classList.add(`${Knight.name}`)\n        console.log(\"Knight is born\");\n        this.PieceType = PieceType.Knight;\n    }\n}\n","import { Cell } from \"./cell\";\nimport { Team ,PieceType} from \"./ChessApp\";\nimport { Piece } from \"./Piece\";\n\nexport class Bishop extends Piece{\n    FindMovementAvailableCells(): Cell[] {\n        let teamCellList : Cell[] | undefined = [];\n        \n        let northWestCell : Cell | undefined = this.FindNorthWestCell(this.currentStandingCell);\n        let northEastCell : Cell | undefined = this.FindNorthEastCell(this.currentStandingCell);\n        let southWestCell : Cell | undefined = this.FindSouthWestCell(this.currentStandingCell);\n        let southEastCell : Cell | undefined = this.FindSouthEastCell(this.currentStandingCell);\n      \n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(northWestCell && this.CanMoveToCellWithAttack(northWestCell))\n            {\n                teamCellList.push(northWestCell);\n                northWestCell = this.FindNorthWestCell(northWestCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(northEastCell && this.CanMoveToCellWithAttack(northEastCell))\n            {\n                teamCellList.push(northEastCell);\n                northEastCell = this.FindNorthEastCell(northEastCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(southWestCell && this.CanMoveToCellWithAttack(southWestCell))\n            {\n                teamCellList.push(southWestCell);\n                southWestCell = this.FindSouthWestCell(southWestCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(southEastCell && this.CanMoveToCellWithAttack(southEastCell))\n            {\n                teamCellList.push(southEastCell);\n                southEastCell = this.FindSouthEastCell(southEastCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        return teamCellList;\n    }\n    constructor(x:number,y:number,team:Team,cellList:Cell[],pieceList:Piece[])\n    {\n        super(x,y,team,cellList,pieceList);\n        this.img.classList.add(`${Bishop.name}`)\n        this.PieceType = PieceType.Bishop;\n    }\n}\n","import { Cell } from \"./cell\";\nimport { Team ,PieceType} from \"./ChessApp\";\nimport { Piece } from \"./Piece\";\n\n\n\nexport class Queen extends Piece{\n    FindMovementAvailableCells(cellList : Cell[]) : Cell[] | undefined {\n        let teamCellList : Cell[] | undefined = [];\n        let northCell : Cell | undefined = this.FindNorthCell(this.currentStandingCell);\n        let westCell : Cell | undefined = this.FindWestCell(this.currentStandingCell);\n        let eastCell : Cell | undefined = this.FindEastCell(this.currentStandingCell);\n        let southCell : Cell | undefined = this.FindSouthCell(this.currentStandingCell);\n\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(northCell && this.CanMoveToCellWithAttack(northCell))\n            {\n                teamCellList.push(northCell);\n                northCell = this.FindNorthCell(northCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(westCell && this.CanMoveToCellWithAttack(westCell))\n            {\n                teamCellList.push(westCell);\n                westCell = this.FindWestCell(westCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(eastCell&& this.CanMoveToCellWithAttack(eastCell))\n            {\n                teamCellList.push(eastCell);\n                eastCell = this.FindEastCell(eastCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(southCell&& this.CanMoveToCellWithAttack(southCell))\n            {\n                teamCellList.push(southCell);\n                southCell = this.FindSouthCell(southCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        \n        let northWestCell : Cell | undefined = this.FindNorthWestCell(this.currentStandingCell);\n        let northEastCell : Cell | undefined = this.FindNorthEastCell(this.currentStandingCell);\n        let southWestCell : Cell | undefined = this.FindSouthWestCell(this.currentStandingCell);\n        let southEastCell : Cell | undefined = this.FindSouthEastCell(this.currentStandingCell);\n      \n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(northWestCell && this.CanMoveToCellWithAttack(northWestCell))\n            {\n                teamCellList.push(northWestCell);\n                northWestCell = this.FindNorthWestCell(northWestCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(northEastCell && this.CanMoveToCellWithAttack(northEastCell))\n            {\n                teamCellList.push(northEastCell);\n                northEastCell = this.FindNorthEastCell(northEastCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(southWestCell && this.CanMoveToCellWithAttack(southWestCell))\n            {\n                teamCellList.push(southWestCell);\n                southWestCell = this.FindSouthWestCell(southWestCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for(let i : number = 0; i<8 ;i++)\n        {\n            if(southEastCell && this.CanMoveToCellWithAttack(southEastCell))\n            {\n                teamCellList.push(southEastCell);\n                southEastCell = this.FindSouthEastCell(southEastCell);\n                continue;\n            }\n            else\n            {\n                break;\n            }\n        }\n        return teamCellList;\n\n\n    }\n    constructor(x:number,y:number,team:Team,cellList:Cell[],pieceList:Piece[])\n    {\n        super(x,y,team,cellList,pieceList);\n        this.img.classList.add(`${Queen\n            .name}`)\n        this.PieceType = PieceType.Queen;\n    }\n}\n\nexport class King extends Piece{   \n    FindMovementAvailableCells(): Cell[] {\n        let teamCellList : Cell[] | undefined = [];\n        let northCell : Cell | undefined = this.FindNorthCell(this.currentStandingCell);\n        let northWestCell : Cell | undefined = this.FindNorthWestCell(this.currentStandingCell);\n        let northEastCell : Cell | undefined = this.FindNorthEastCell(this.currentStandingCell);\n        let eastCell : Cell | undefined = this.FindEastCell(this.currentStandingCell);\n        let westCell : Cell | undefined = this.FindWestCell(this.currentStandingCell);\n        let southCell : Cell | undefined = this.FindSouthCell(this.currentStandingCell);\n        let southWestCell : Cell | undefined = this.FindSouthWestCell(this.currentStandingCell);\n        let southEastCell : Cell | undefined = this.FindSouthEastCell(this.currentStandingCell);\n\n        if(northCell)  \n        {\n            if(this.CanMoveToCellWithAttack(northCell)) teamCellList.push(northCell);\n        } \n        if(northWestCell && this.CanMoveToCellWithAttack(northWestCell)) teamCellList.push(northWestCell);\n        if(northEastCell&& this.CanMoveToCellWithAttack(northEastCell)) teamCellList.push(northEastCell);\n        if(eastCell&& this.CanMoveToCellWithAttack(eastCell)) teamCellList.push(eastCell);\n        if(westCell&& this.CanMoveToCellWithAttack(westCell)) teamCellList.push(westCell);\n        if(southCell&& this.CanMoveToCellWithAttack(southCell)) teamCellList.push(southCell);\n        if(southWestCell&& this.CanMoveToCellWithAttack(southWestCell)) teamCellList.push(southWestCell);\n        if(southEastCell&& this.CanMoveToCellWithAttack(southEastCell)) teamCellList.push(southEastCell);\n\n        return teamCellList;\n\n    }\n    constructor(x:number,y:number,team:Team,cellList:Cell[],pieceList:Piece[]){\n        super(x,y,team,cellList,pieceList);\n        this.img.classList.add(`${King.name}`)\n        this.PieceType = PieceType.King;\n    }\n}\n","import { Cell } from './cell';\nimport { Piece } from './Piece';\n\nimport { GameState_PlayingState, GameState, Team } from './ChessApp.js';\nimport { Pawn } from './Pawn.js';\nimport { Rook } from './Rook.js';\nimport { Knight } from './Knight.js';\nimport { Bishop } from './Bishop.js';\nimport { King,Queen } from './King.js';\nimport { Command, MoveCommand } from './Command';\n\nexport class GameManager\n{\n    mainDiv: HTMLElement;\n    startButton : HTMLElement;\n    resetButton : HTMLElement;\n    cellList: Cell[] = [];\n    currentAvailableMovementCells: Cell[] | undefined = [];\n    offset: number;\n    margin: number = 20;\n    pieceList : Piece[] = [];\n    board : number[][];\n    isGamePlaying : boolean;\n    _currentGameState : GameState;\n    currentTurnState : GameState_PlayingState;\n    // mapInfo : MapInfo;\n    // commandList : Command[]\n    currentSelectedPiece : Piece | undefined;\n    currentPlayingTeam : Team;\n    grid : HTMLElement;\n    turnStateHtmlText : HTMLElement | null;\n    winLostStateHtmlText : HTMLElement| null;\n    _commandList : Command[] = [];\n\n    constructor()\n    {\n        this.mainDiv = document.getElementById('grid')!;\n        this.turnStateHtmlText = document.getElementById('TurnStatus');\n        this.winLostStateHtmlText = document.getElementById('WinText')!;\n        this.startButton = document.getElementById('StartButton')!;\n        this.resetButton = document.getElementById('ResetButton')!;\n        this.grid = document.getElementById('grid')!;\n        this.CurrentGameState = GameState.Ready;\n        this.currentTurnState = GameState_PlayingState.WaitingForPieceSelection;\n        this.startButton.addEventListener('click',() => this.StartGame());\n        this.resetButton.addEventListener('click',() => this.ResetButton());\n        // console.log(this.commandList);\n\n    }\n\n\n    get getCurrentGameState()\n    {\n        return this._currentGameState;\n    }\n\n    set CurrentGameState(value: GameState)\n    {\n        switch(value)\n        {\n            case GameState.Ready :\n\n                break;\n            case GameState.StaringGame:\n                this.startButton.setAttribute(\"stlye\",\"pointer-events: none\");\n                this.startButton.setAttribute(\"stlye\",\"opacity: 0.2\");   \n                break;\n\n            case GameState.NorthTeamTurn:\n                this.currentPlayingTeam = Team.North;\n                if(this.turnStateHtmlText)\n                {\n                    this.turnStateHtmlText.innerHTML = Team.North;\n                }\n                this.turnStateHtmlText?.setAttribute(\"style\",\"color:aqua;\");\n                break;\n            case GameState.SouthTeamTurn:\n                this.currentPlayingTeam = Team.South;\n                if(this.turnStateHtmlText)\n                {\n                    this.turnStateHtmlText.innerHTML = Team.South;\n\n                }\n                this.turnStateHtmlText?.setAttribute(\"style\",\"color:orange;\");\n                break;\n            case GameState.End:\n                this.startButton.setAttribute(\"stlye\",\"pointer-events: auto\");\n                this.startButton.setAttribute(\"stlye\",\"opacity: 1\");\n            \n                break;\n\n        }\n\n        this._currentGameState = value;\n\n    }\n\n\n    StartGame()\n    {\n        this.CurrentGameState = GameState.StaringGame;\n        this.startButton.classList.remove(\"movementAvailableCell\");\n        //Random Start Team;\n        if(Math.floor(Math.random()) == 0)\n        {\n            this.CurrentGameState = GameState.NorthTeamTurn;\n        }\n        else\n        {\n            this.CurrentGameState = GameState.SouthTeamTurn;\n        }\n    }\n\n    EndGame()\n    {\n        //Animation\n        this.CurrentGameState = GameState.End;\n    }\n\n\n    GameStateLogic()\n    {\n        \n    }\n\n\n    DoTurnLogic(cell:Cell)\n    {\n        switch(this.currentTurnState)\n        {\n            case GameState_PlayingState.WaitingForPieceSelection:\n\n                if(!cell.CheckOccupied())\n                {\n                    console.log(\"Empty Cell\");\n                    return;\n                } \n                else\n                {\n                    let piece: Piece = this.GetPieceFromCell(cell)!;\n                    // this.pieceList.find(p => cell.x == p.x && cell.y == p.y)!;\n                    \n                    if(piece.team == this.currentPlayingTeam)\n                    {\n                        this.currentAvailableMovementCells = piece.FindMovementAvailableCells(this.cellList);\n                        if(this.currentAvailableMovementCells != undefined \n                            && this.currentAvailableMovementCells.length > 0)\n                        {\n                            this.currentAvailableMovementCells.forEach(c => \n                            {\n                                c.TurnOnMovementAvailableState();\n                            });\n\n                            this.currentSelectedPiece = piece;\n                            this.currentTurnState = GameState_PlayingState.WaitingForMovement;\n                        }\n                        else\n                        {\n                            console.log(\"This piece can't move...\");\n                        }\n                    }\n                }\n                break;\n\n\n            case GameState_PlayingState.WaitingForMovement:\n\n                if(cell.IsAvailableMovementCell())\n                {\n                    let targetPiece : Piece | undefined = this.GetPieceFromCell(cell)!;\n                    \n                    if(targetPiece && targetPiece.team != this.currentSelectedPiece!.team)\n                    {\n                        // KILL\n                        targetPiece.Die();\n                        targetPiece = undefined;\n                    }\n                    \n\n                    this._commandList.push(this.currentSelectedPiece!.Move(cell.x,cell.y)!);\n\n                    this.ResetAllCellMovementAvailableState();\n                    this.currentTurnState = GameState_PlayingState.TurnFinishing;\n\n\n                    if(this.currentPlayingTeam == Team.South)\n                    {\n                        this.CurrentGameState = GameState.NorthTeamTurn;\n                    }\n                    else\n                    {\n                        this.CurrentGameState = GameState.SouthTeamTurn;\n                    }\n\n\n                    this.currentTurnState = GameState_PlayingState.WaitingForPieceSelection;\n                    return;\n                    \n                }\n                else\n                {\n                    console.log(\"Select available cell!\");\n                }\n                break;\n        }\n\n        \n        // document.addEventListener('click', () => {})\n        \n        if(this.CheckWinState() != undefined)\n        {\n            console.log(\"Check Win State\");\n            this.SetWin(this.CheckWinState()!);\n        }\n    }\n\n    SpawnCells():void \n    {\n        for(let j :number = 0 ; j < 8; j++)\n        {\n            for(let i :number= 0; i < 8 ; i++)\n            {\n                let cellHTMLElement : HTMLButtonElement = document.createElement(\"button\");\n               \n                let xRemainder : number = j % 2;\n                let yRemainder : number = i % 2;\n                if(yRemainder == 0)\n                {\n                    if(xRemainder == 0)\n                    {\n                        cellHTMLElement.classList.add(\"cell-even\");\n                    }\n                    else\n                    {\n                        cellHTMLElement.classList.add(\"cell\");\n                    }\n                }\n                else\n                {\n                    if(xRemainder == 0)\n                    {\n                        cellHTMLElement.classList.add(\"cell\");\n                    }\n                    else\n                    {\n                        cellHTMLElement.classList.add(\"cell-even\");\n                    }\n                }\n                cellHTMLElement.id = `${i},${j}`;\n                cellHTMLElement.innerText = `${i},${j}`;\n\n                let cell :Cell = new Cell(i,j,cellHTMLElement,this);\n                this.cellList.push(cell);\n\n                this.mainDiv.append(cellHTMLElement);\n            }\n        }\n    }\n\n\n    SpawnPieces(): void\n    {\n        this.pieceList.push(new Knight(1,0,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(0,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(1,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(2,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(3,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(4,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(5,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(6,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(7,1,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Queen(3,0,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new King(4,0,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Bishop(2,0,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Bishop(5,0,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Knight(6,0,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Rook(0,0,Team.North,this.cellList,this.pieceList));\n        this.pieceList.push(new Rook(7,0,Team.North,this.cellList,this.pieceList));\n\n\n\n\n\n        this.pieceList.push(new Pawn(0,6,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(1,6,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(2,6,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(3,6,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(4,6,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(5,6,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(6,6,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Pawn(7,6,Team.South,this.cellList,this.pieceList));\n\n        this.pieceList.push(new Knight(6,7,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Rook(0,7,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Rook(7,7,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new King(3,7,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Bishop(2,7,Team.South,this.cellList,this.pieceList));\n        this.pieceList.push(new Bishop(5,7,Team.South,this.cellList,this.pieceList));\n\n        this.pieceList.push(new Queen(4,7,Team.South,this.cellList,this.pieceList));\n\n        this.pieceList.push(new Knight(1,7,Team.South,this.cellList,this.pieceList));\n\n\n\n    }\n\n    ReceiveCellButtonEvent(cell:Cell)\n    {\n        this.DoTurnLogic(cell);\n    }\n\n    GetPieceFromCell(cell:Cell) : Piece | undefined\n    {\n        return this.pieceList.find(p => p.x == cell.x && p.y == cell.y);\n    }\n\n\n    private GameOver(): void\n    {\n\n    }\n        \n    private ResetAllCellMovementAvailableState()\n    {\n        console.log(\"resetting\");\n        this.cellList.forEach(c =>\n            {\n                if(c.HTMLElement.classList.contains(\"movementAvailableCell\"))\n                {\n                    c.HTMLElement.classList.remove(\"movementAvailableCell\");\n                }\n            })\n    }\n\n    private CheckWinState() : Team | undefined\n    {\n        if(this.pieceList.filter(p => p.team == Team.North).length == 0)\n        {\n            return Team.South;\n        }\n        if(this.pieceList.filter(p => p.team == Team.South).length == 0)\n        {\n            return Team.North;\n        }\n        return undefined;\n    }\n\n    private SetWin(team:Team)\n    {\n        document.getElementById(\"WinText\")!.innerHTML = team.toString();\n        this.EndGame();\n    }\n\n    private ResetButton()\n    {\n        this.DestroyAllPieces();\n        this.DestroyAllCells();\n        this.CurrentGameState = GameState.Ready;\n        this.currentTurnState = GameState_PlayingState.WaitingForPieceSelection;\n        this.currentSelectedPiece = undefined;\n        this.SpawnCells();\n        this.SpawnPieces();\n    }\n\n    DestroyAllPieces()\n    {\n        this.pieceList.forEach((piece : Piece) => \n        {\n            if(piece.img != null)\n            {\n                let node = piece.img.parentNode;\n                node?.removeChild(piece.img);\n            }\n        });\n        this.pieceList = [];\n    }\n\n    DestroyAllCells()\n    {\n        this.cellList.forEach((cell : Cell)=> {\n            if(cell.HTMLElement != null)\n            {\n                 let node = cell.HTMLElement.parentNode!;\n                 node.removeChild(cell.HTMLElement);\n            }\n        });\n        this.cellList = [];\n    }\n\n    GetOppositeTeam(team:Team) : Team\n    {\n        if(team == Team.North)\n        {\n            return Team.South;\n        }\n        else\n        {\n            return Team.North;\n        }\n    }\n}\n\n\n// (DebugGameManager());\n\n// function DebugGameManager() : void {\n//     let debugButton = document.getElementById(\"DebugButton\");\n//     debugButton?.addEventListener('click',() => console.log(ChessApp.gameManager));\n// };","import { GameManager } from \"./GameManager\";\n\nexport enum GameState { Ready, StaringGame,SouthTeamTurn,NorthTeamTurn, End};\nexport enum GameState_PlayingState { WaitingForPieceSelection,WaitingForMovement,TurnFinishing};\nexport enum Team { South = \"South\", North = \"North\" };\nexport enum Direction { North, West, East, South, NorthWest,NorthEast,SouthWest,SouthEast};\nexport enum PieceType { Pawn, Knight, Bishop, Queen, King, Rook}\n\n\nexport class ChessApp{\n    gameManager : GameManager;\n    constructor(){\n        this.gameManager = new GameManager();\n        this.gameManager.SpawnCells();\n        this.gameManager.SpawnPieces();\n    }\n}\n\n","import {ChessApp} from './ChessApp';\n\nconst chessApp = new ChessApp();\n\nexport default chessApp;\n\n"],"names":[],"mappings":"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"}